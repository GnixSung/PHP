模式设计是什么？初学者一开始会被这高大上的名称给唬住。而对于有丰富编程经验的老鸟来说，模式设计又是无处不在。很多接触的框架就是基于各种模式设计形成的。 简单说，在写代码的过程中一开始往往接触的是面向过程的，简单的基础的编程。这个时候我们往往追求的是代码能够实现某项功能就万事大吉。管他代码多么冗余，管他代码是否可重用，管他效率如何，能实现功能就好。但是，真正应用于实际的，更被大家采纳的是那些高效的，可重用的，便于团队开发的代码。基于这些因素，你不能像练手一样，随便命名函数名，随便放置脚本。模式设计告诉是给人们组织代码提供一种思路，实现可重用代码、让代码更容易被他人理解、保证代码可靠性。

　　在所有模式设计中，有三种基础设计模式，单例模式，工厂模式，注册树模式，其他模式往往基于这几种模式，今天带来的是单例模式。

什么是单例模式？

　　根据这个名称，我们很容易了解到，单例模式指的是在整个应用中只有一个对象实例的设计模式。

　　为什么要用单例模式？

　　php常常和数据库打交道，如果在应用中如果频繁建立连接对象，进行new操作的话，会消耗大料的系统内存资源，这并不是我们希望看到的。再则，在团队合作项目中，单例模式可以有效避免不同程序员new自己的对象，造成人为的系统消耗。

　如何建立单例模式？

　　在看到这个问题的时候，相信优秀的程序员很可能自己试着根据要求去创建单例模式，而不是坐等前人的经验。区别于其他博友告诉你什么样的模式是单例模式，我人更愿意和有面向对象编程基本经验的你考虑一下如何自己建立单例模式。

　　我们首先从题目出发，单例模式是只有一个对象实例的设计模式。这一点是很让人蛋疼的。我们平常创建的类不是能创建很多对象的，就是不能创建对象的（抽象类）。要创建对象需要有类这是必须的，而且不能是抽象类。这个类要防止别人可以多次创建函数。我们自然而然考虑到了从构造函数入手。但是，每次new操作都会调用构造函数，也就是会多次创建对象实例。这和我们设计初衷相悖了。在此处务必申明构造函数为private或者protected这样才能解决这个问题。

　　构造函数被申明为private或者protected这注定无法通过new的方法创建实例对象了。而且我们发现，经过这一步处理后，解决问题的前景变得明朗起来了。为什么呢？既然无法通过new方法创建对象实例，那么我们只能通过类内的方法来创建对象实例了。 这个时候我们面临一个有趣的先有鸡还是先有蛋的问题。我们往往往往是创建了对象后才调用对象的方法，而此时需要调用类里面的方法来创建对象。不受是否创建对象影响都能调用的方法的解决方案毋庸置疑那就是利用关键字--static。

　　在类内创建静态方法完成完成什么工作呢？回归主题：确保只创建一个实例对象。如何确保只有一个呢？这很简单，if判断一下啊。存在的话直接返回，不存在自己创建一个嘛。当然这个实例对象是类的静态属性。至此，单例模式要求的功能实现完成。真的完成了么?还不算~如果有个类继承本类，将构造方法申明为public那不又坏事儿了？那有必要在构造方法前加final关键字了。

　　最后贴上单例模式代码，代码解释都在上面了~~

    <?php
    class Single{
        public $hash;
        static protected $ins=null;
        final protected function __construct(){
            $this->hash=rand(1,9999);
        }

        static public function getInstance(){
            if (self::$ins instanceof self) {
                return self::$ins;
            }
            self::$ins=new self();
            return self::$ins;
        }
    }

    本身单例模式并不复杂，但需要深入理解。很多初学者依旧会感叹：卧槽，构造方法原来不一直是public啊~卧槽还可以不通过new创建对象啊~其实笔者想说，不管构造方法被申明为public，private还是protected，最终创建对象的时候都会调用。一直是new创建对象实例，单例模式也用new创建对象，只是换个地方而已，从类外到类内。

    　　最后对研究出各种精妙的模式设计的程序员表示拜服~~